import os
from aiogram import Bot, Dispatcher
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from uuid import uuid4
import asyncio

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
# –¢–æ–∫–µ–Ω —Ç–≥ –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = ''
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

BOT_USERNAME = "PW6_Lotus_new_member_greet1_bot"

HERO_CLASSES_DICT =  {
    "–ú–µ—á–Ω–∏–∫": "class_blade",
    "–í–æ–∏–Ω": "class_warrior",
    "–ú–∞–≥": "class_mage",
    "–¢–∞–Ω–∫": "class_tank",
    "–î—Ä—É–∏–¥": "class_dru",
    "–ñ—Ä–µ—Ü": "class_priest",
    "–õ—É—á–Ω–∏–∫": "class_archer",
    "–ê—Å—Å–∞—Å–∏–Ω": "class_assasin",
    "–û–∫—É–ª—å—Ç–∏—Å—Ç": "class_okul"
}

CALLBACK_TO_LABEL = {v: k for k, v in HERO_CLASSES_DICT.items()}

# –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "onboarding.db"

PLAYERS_DB = {
    "shadowwalker": {"nickname": "ShadowWalker", "class": "–ú–∞–≥", "bm": "150000"},
    "bladeking": {"nickname": "BladeKing", "class": "–ú–µ—á–Ω–∏–∫", "bm": "142000"},
    "lightarcher": {"nickname": "LightArcher", "class": "–õ—É—á–Ω–∏–∫", "bm": "135500"},
}

# === FSM (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π) ===
class Onboarding(StatesGroup):
    nickname = State()  # –®–∞–≥ 1: –ù–∏–∫–Ω–µ–π–º
    player_class = State()  # –®–∞–≥ 2: –ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    player_bm = State() # –®–∞–≥ 3: –ö–ª–∞—Å—Å –ë–ú
    player_last_guild = State() # –®–∞–≥ 4: –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–∏–ª—å–¥–∏—è 

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite ===
# async def init_db():
#     async with aiosqlite.connect(DB_FILE) as db:
#         await db.execute("""
#             CREATE TABLE IF NOT EXISTS users (
#                 user_id INTEGER PRIMARY KEY,
#                 nickname TEXT
#             );
#         """)
#         await db.commit()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===
def build_class_keyboard() -> InlineKeyboardMarkup:
    buttons = [ [InlineKeyboardButton(text=name, callback_data=data)]
                for name, data in HERO_CLASSES_DICT.items()
                ]
    return buttons

async def set_custom_title(user_id, chat_id, title):
    try:
        #–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        member = await bot.get_chat_member(chat_id, user_id)
        #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, —Ç–æ –¥–∞–µ–º –µ–º—É –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞
        if not isinstance(member, (ChatMemberAdministrator, ChatMemberOwner)):
            res = await bot.promote_chat_member(chat_id=chat_id, 
                                                user_id=user_id, 
                                                can_invite_users = True)
            if not res: raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        #–î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–º—è
        await bot.set_chat_administrator_custom_title(chat_id=chat_id, user_id=user_id, custom_title=title)
    except Exception as e:
        raise

# === 1. –í –≥—Ä—É–ø–ø–µ: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ===
@dp.message(F.new_chat_members)
async def welcome_new_members(message: Message):
    link = f"https://t.me/{BOT_USERNAME}?start=onboarding_{message.chat.id}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üöÄ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–æ–≤–∏—á–∫–∞", 
                                                                           url=link)]])
    #TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–π
    for user in message.new_chat_members:
        username = user.username
        if username:
            mention = f"@{username}"
        else:
            mention = user.full_name
        await bot.send_message(
                                chat_id=message.chat.id,
                                message_thread_id=message.message_thread_id,  # –í–∞–∂–Ω–æ –¥–ª—è —Ñ–æ—Ä—É–º–æ–≤
                                text=f"–ü—Ä–∏–≤–µ—Ç, {mention}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –≥–∏–ª—å–¥–∏–∏ Lotus.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
                                reply_markup=keyboard)

# === 2. –í –õ–°: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–æ–≤–∏—á–∫–∞" ===
@dp.message(CommandStart(deep_link=True))
async def start_with_payload(message: Message, command: CommandStart, state: FSMContext):
    if command.args and command.args.startswith("onboarding_"):
        chat_id = int(command.args.split("_")[1])
        await state.update_data(origin_chat_id=chat_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?")
        await state.set_state(Onboarding.nickname)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# === 3. –≤ –õ–°: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–∞ ===
@dp.message(Onboarding.nickname)
async def process_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(nickname=nickname)
    keyboard = InlineKeyboardMarkup(inline_keyboard = build_class_keyboard())
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=keyboard)
    await state.set_state(Onboarding.player_class)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

# === 4. –í –õ–°: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ ===
@dp.callback_query(F.data.in_(CALLBACK_TO_LABEL.keys()))
async def process_class(callback: CallbackQuery, state: FSMContext):
    await callback.answer() #–ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å–∏–∫–∏
    selected_class = CALLBACK_TO_LABEL.get(callback.data, "")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å
    await state.update_data(player_class=selected_class)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await callback.message.edit_text(f"–¢—ã –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å: {selected_class}.\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ë–ú.")
    await state.set_state(Onboarding.player_bm)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    
# === 5. –≤ –õ–°: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ë–ú ===
@dp.message(Onboarding.player_bm)
async def process_bm(message: Message, state: FSMContext):
    player_bm = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ú –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(player_bm=player_bm)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø—Ä–æ—à–ª—É—é –≥–∏–ª—å–¥–∏—é –∏ –ø—Ä–∏—á–∏–Ω—É —É—Ö–æ–¥–∞:")
    await state.set_state(Onboarding.player_last_guild)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é    


# === 6. –≤ –õ–°: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏–ª—å–¥–∏–∏===
@dp.message(Onboarding.player_last_guild)
async def process_last_guild(message: Message, state: FSMContext):
    player_last_guild = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    data = await state.get_data()
    chat_id = data.get("origin_chat_id")
    nickname = data.get("nickname")
    player_class = data.get("player_class")
    player_bm = data.get("player_bm")
    await state.update_data(player_last_guild=player_last_guild)
    #–î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∏–∫ –∏–∑ –∏–≥—Ä—ã:
    try:
        await  set_custom_title(user_id=message.from_user.id,
                                chat_id=chat_id,
                                title = nickname)
        res_set_title = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {nickname}"
    except Exception as e:
        res_set_title = f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}"

    #–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–∏—á–∫—É:
    await message.answer(f"–ù–∏–∫: {nickname}\n–ö–ª–∞—Å—Å: {player_class}\n–ë–ú: {player_bm}\n–ü—Ä–æ—à–ª–∞—è –≥–∏–ª—å–¥–∏—è: {player_last_guild}\n–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
    #–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É:
    await bot.send_message(
        chat_id=chat_id,
        text=(
            f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {message.from_user.mention_html()}:\n\n"
            f"üë§ –ù–∏–∫: {nickname}\n"
            f"‚öîÔ∏è –ö–ª–∞—Å—Å: {player_class}\n"
            f"üìä –ë–ú: {player_bm}\n"
            f"üè∞ –ü—Ä–æ—à–ª–∞—è –≥–∏–ª—å–¥–∏—è: {player_last_guild}\n\n"
            f"{res_set_title}"),
        parse_mode="HTML"
    )
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è


@dp.message(Command("set_user_info"))
async def set_user_info(message: Message):
    title = message.text
    title = title.split(sep = ' ', maxsplit = 1)[1]
    title = title.strip()
    if not title:
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ –∏–≥—Ä–µ. –ü—Ä–∏–º–µ—Ä:\n/set_user_info <–Ω–∏–∫ –≤ –∏–≥—Ä–µ>")
        return
    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    try:
        await set_custom_title(user_id = user_id, 
                               chat_id = chat_id, 
                               title = title)
        await message.reply(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å @{message.reply_to_message.from_user.username or user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {title}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@dp.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    query = inline_query.query.strip().lower()
    results = []

    for key, player in PLAYERS_DB.items():
        if query in key:
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title=player["nickname"],
                    description=f'{player["class"]}, –ë–ú: {player["bm"]}',
                    input_message_content=InputTextMessageContent(
                        message_text=(
                            f"üìã <b>{player['nickname']}</b>\n"
                            f"üéØ –ö–ª–∞—Å—Å: {player['class']}\n"
                            f"‚öîÔ∏è –ë–ú: {player['bm']}"
                        ),
                        parse_mode=ParseMode.HTML
                    )
                )
            )

    await inline_query.answer(results, cache_time=1)


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))





# async def parse_text_to_title(text:str):
#     title = text
#     title = title.split(sep = ' ', maxsplit = 1)[1]
#     title = title.strip()
#     return title

# async def set_custom_title(user_id, chat_id, title):
#     try:
#         #–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#         member = await bot.get_chat_member(chat_id, user_id)
#         #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, —Ç–æ –¥–∞–µ–º –µ–º—É –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞
#         if not isinstance(member, (ChatMemberAdministrator, ChatMemberOwner)):
#             res = await bot.promote_chat_member(chat_id=chat_id, 
#                                                 user_id=user_id, 
#                                                 can_invite_users = True)
#             if not res: raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
#         #–î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–º—è
#         await bot.set_chat_administrator_custom_title(chat_id=chat_id, user_id=user_id, custom_title=title)
#     except Exception as e:
#         raise

# @dp.message(Command("set_my_info"))
# async def set_my_info(message: Message):
#     title = await parse_text_to_title(message.text)
#     if not title:
#         await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ –∏–≥—Ä–µ. –ü—Ä–∏–º–µ—Ä:\n/set_my_info <–Ω–∏–∫ –≤ –∏–≥—Ä–µ>")
#         return
#     user_id = message.from_user.id
#     chat_id = message.chat.id
#     try:
#         await set_custom_title(user_id = user_id, 
#                                chat_id = chat_id, 
#                                title = title)
#         await message.reply(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å @{message.from_user.username or user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {title}")
#     except Exception as e:
#         await message.reply(f"–û—à–∏–±–∫–∞: {e}")


# @dp.message(Command("set_user_info"))
# async def set_user_info(message: Message):
#     title = await parse_text_to_title(message.text)
#     if not title:
#         await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ –∏–≥—Ä–µ. –ü—Ä–∏–º–µ—Ä:\n/set_user_info <–Ω–∏–∫ –≤ –∏–≥—Ä–µ>")
#         return
#     user_id = message.reply_to_message.from_user.id
#     chat_id = message.chat.id
#     try:
#         await set_custom_title(user_id = user_id, 
#                                chat_id = chat_id, 
#                                title = title)
#         await message.reply(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å @{message.reply_to_message.from_user.username or user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {title}")
#     except Exception as e:
#         await message.reply(f"–û—à–∏–±–∫–∞: {e}")
